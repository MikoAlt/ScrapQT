# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import services_pb2 as services__pb2

GRPC_GENERATED_VERSION = '1.71.2'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in services_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class DatabaseStub(object):
    """Service for storing scraped data.
    This service is deprecated and will be removed.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SaveItems = channel.stream_unary(
                '/scrapqt.Database/SaveItems',
                request_serializer=services__pb2.ScrapedItem.SerializeToString,
                response_deserializer=services__pb2.SaveStatus.FromString,
                _registered_method=True)
        self.SaveQuery = channel.unary_unary(
                '/scrapqt.Database/SaveQuery',
                request_serializer=services__pb2.SaveQueryRequest.SerializeToString,
                response_deserializer=services__pb2.SaveQueryResponse.FromString,
                _registered_method=True)
        self.LinkQueries = channel.unary_unary(
                '/scrapqt.Database/LinkQueries',
                request_serializer=services__pb2.LinkQueriesRequest.SerializeToString,
                response_deserializer=services__pb2.LinkQueriesResponse.FromString,
                _registered_method=True)


class DatabaseServicer(object):
    """Service for storing scraped data.
    This service is deprecated and will be removed.
    """

    def SaveItems(self, request_iterator, context):
        """Sends a stream of scraped items to be saved.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SaveQuery(self, request, context):
        """Saves a query and returns its ID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LinkQueries(self, request, context):
        """Links two queries together.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DatabaseServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SaveItems': grpc.stream_unary_rpc_method_handler(
                    servicer.SaveItems,
                    request_deserializer=services__pb2.ScrapedItem.FromString,
                    response_serializer=services__pb2.SaveStatus.SerializeToString,
            ),
            'SaveQuery': grpc.unary_unary_rpc_method_handler(
                    servicer.SaveQuery,
                    request_deserializer=services__pb2.SaveQueryRequest.FromString,
                    response_serializer=services__pb2.SaveQueryResponse.SerializeToString,
            ),
            'LinkQueries': grpc.unary_unary_rpc_method_handler(
                    servicer.LinkQueries,
                    request_deserializer=services__pb2.LinkQueriesRequest.FromString,
                    response_serializer=services__pb2.LinkQueriesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'scrapqt.Database', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('scrapqt.Database', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Database(object):
    """Service for storing scraped data.
    This service is deprecated and will be removed.
    """

    @staticmethod
    def SaveItems(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/scrapqt.Database/SaveItems',
            services__pb2.ScrapedItem.SerializeToString,
            services__pb2.SaveStatus.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SaveQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scrapqt.Database/SaveQuery',
            services__pb2.SaveQueryRequest.SerializeToString,
            services__pb2.SaveQueryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LinkQueries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scrapqt.Database/LinkQueries',
            services__pb2.LinkQueriesRequest.SerializeToString,
            services__pb2.LinkQueriesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ScraperStub(object):
    """Service for scraping e-commerce websites.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Scrape = channel.unary_unary(
                '/scrapqt.Scraper/Scrape',
                request_serializer=services__pb2.ScrapeRequest.SerializeToString,
                response_deserializer=services__pb2.ScrapeResponse.FromString,
                _registered_method=True)


class ScraperServicer(object):
    """Service for scraping e-commerce websites.
    """

    def Scrape(self, request, context):
        """Initiates a scraping task.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ScraperServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Scrape': grpc.unary_unary_rpc_method_handler(
                    servicer.Scrape,
                    request_deserializer=services__pb2.ScrapeRequest.FromString,
                    response_serializer=services__pb2.ScrapeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'scrapqt.Scraper', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('scrapqt.Scraper', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Scraper(object):
    """Service for scraping e-commerce websites.
    """

    @staticmethod
    def Scrape(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scrapqt.Scraper/Scrape',
            services__pb2.ScrapeRequest.SerializeToString,
            services__pb2.ScrapeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class SentimentStub(object):
    """Service for analyzing sentiment of a given text.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Analyze = channel.unary_unary(
                '/scrapqt.Sentiment/Analyze',
                request_serializer=services__pb2.SentimentRequest.SerializeToString,
                response_deserializer=services__pb2.SentimentResponse.FromString,
                _registered_method=True)
        self.AnalyzeDatabaseSentiment = channel.unary_unary(
                '/scrapqt.Sentiment/AnalyzeDatabaseSentiment',
                request_serializer=services__pb2.AnalyzeDatabaseSentimentRequest.SerializeToString,
                response_deserializer=services__pb2.AnalyzeDatabaseSentimentResponse.FromString,
                _registered_method=True)
        self.SaveItems = channel.stream_unary(
                '/scrapqt.Sentiment/SaveItems',
                request_serializer=services__pb2.ScrapedItem.SerializeToString,
                response_deserializer=services__pb2.SaveStatus.FromString,
                _registered_method=True)
        self.SaveQuery = channel.unary_unary(
                '/scrapqt.Sentiment/SaveQuery',
                request_serializer=services__pb2.SaveQueryRequest.SerializeToString,
                response_deserializer=services__pb2.SaveQueryResponse.FromString,
                _registered_method=True)
        self.LinkQueries = channel.unary_unary(
                '/scrapqt.Sentiment/LinkQueries',
                request_serializer=services__pb2.LinkQueriesRequest.SerializeToString,
                response_deserializer=services__pb2.LinkQueriesResponse.FromString,
                _registered_method=True)


class SentimentServicer(object):
    """Service for analyzing sentiment of a given text.
    """

    def Analyze(self, request, context):
        """Analyzes the sentiment of a text.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AnalyzeDatabaseSentiment(self, request, context):
        """Analyzes the sentiment of entries in the database.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SaveItems(self, request_iterator, context):
        """Saves a stream of scraped items to the database.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SaveQuery(self, request, context):
        """Saves a query and returns its ID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LinkQueries(self, request, context):
        """Links two queries together.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SentimentServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Analyze': grpc.unary_unary_rpc_method_handler(
                    servicer.Analyze,
                    request_deserializer=services__pb2.SentimentRequest.FromString,
                    response_serializer=services__pb2.SentimentResponse.SerializeToString,
            ),
            'AnalyzeDatabaseSentiment': grpc.unary_unary_rpc_method_handler(
                    servicer.AnalyzeDatabaseSentiment,
                    request_deserializer=services__pb2.AnalyzeDatabaseSentimentRequest.FromString,
                    response_serializer=services__pb2.AnalyzeDatabaseSentimentResponse.SerializeToString,
            ),
            'SaveItems': grpc.stream_unary_rpc_method_handler(
                    servicer.SaveItems,
                    request_deserializer=services__pb2.ScrapedItem.FromString,
                    response_serializer=services__pb2.SaveStatus.SerializeToString,
            ),
            'SaveQuery': grpc.unary_unary_rpc_method_handler(
                    servicer.SaveQuery,
                    request_deserializer=services__pb2.SaveQueryRequest.FromString,
                    response_serializer=services__pb2.SaveQueryResponse.SerializeToString,
            ),
            'LinkQueries': grpc.unary_unary_rpc_method_handler(
                    servicer.LinkQueries,
                    request_deserializer=services__pb2.LinkQueriesRequest.FromString,
                    response_serializer=services__pb2.LinkQueriesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'scrapqt.Sentiment', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('scrapqt.Sentiment', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Sentiment(object):
    """Service for analyzing sentiment of a given text.
    """

    @staticmethod
    def Analyze(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scrapqt.Sentiment/Analyze',
            services__pb2.SentimentRequest.SerializeToString,
            services__pb2.SentimentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AnalyzeDatabaseSentiment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scrapqt.Sentiment/AnalyzeDatabaseSentiment',
            services__pb2.AnalyzeDatabaseSentimentRequest.SerializeToString,
            services__pb2.AnalyzeDatabaseSentimentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SaveItems(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/scrapqt.Sentiment/SaveItems',
            services__pb2.ScrapedItem.SerializeToString,
            services__pb2.SaveStatus.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SaveQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scrapqt.Sentiment/SaveQuery',
            services__pb2.SaveQueryRequest.SerializeToString,
            services__pb2.SaveQueryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LinkQueries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scrapqt.Sentiment/LinkQueries',
            services__pb2.LinkQueriesRequest.SerializeToString,
            services__pb2.LinkQueriesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
